#!/bin/bash

set -e
# This wrapper script will parse user file paths, create the .env file, and execute docker-compose.

# --- Default container-side paths ---
CONTAINER_DATA_PATH="/data"
CONTAINER_OUTPUT_PATH="/output"

SMEDANNO_SCRIPT_ARGS=()
declare -A HOST_TO_CONTAINER_MOUNTS

# --- Pre-scan for --dataDir and --outputDir to establish base paths ---
for i in "$@"; do
    case $i in
        --dataDir=*) HOST_DATA_PATH=$(realpath "${i#*=}");;
        --dataDir) HOST_DATA_PATH=$(realpath "$2");;
        --outputDir=*) HOST_OUTPUT_PATH=$(realpath "${i#*=}");;
        --outputDir) HOST_OUTPUT_PATH=$(realpath "$2");;
    esac
done

# --- Validation ---
if [ -z "$HOST_DATA_PATH" ] || [ -z "$HOST_OUTPUT_PATH" ]; then
    echo "Error: You must provide both --dataDir and --outputDir arguments."
    echo "All external input files must be placed within the directory provided to --dataDir."
    exit 1
fi

# Add the primary mounts
HOST_TO_CONTAINER_MOUNTS["${HOST_DATA_PATH}"]="${CONTAINER_DATA_PATH}"
HOST_TO_CONTAINER_MOUNTS["${HOST_OUTPUT_PATH}"]="${CONTAINER_OUTPUT_PATH}"
# Add the script's own directory
HOST_TO_CONTAINER_MOUNTS["$(pwd)"]="/smedanno"


# --- Argument processing loop ---
args_for_container=()
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        # These flags take a path that needs to be translated
        --genomeRef|--genomeGTF|--rrnaRef|--finalGTF|--alignDir|--SR_RB_gtf_dir|--SR_DN_gtf_dir|--MR_RB_gtf_dir|--MR_DN_gtf_dir|--genomeDir)
            HOST_FILE_PATH=$(realpath "$2")
            # Ensure the provided path is inside an already-mounted directory or needs a new one.
            # For simplicity with this design, we enforce all inputs are in dataDir.
            if [[ "${HOST_FILE_PATH}" != "${HOST_DATA_PATH}"* ]]; then
                echo "Error: Input file/directory \"${HOST_FILE_PATH}\" for flag $1 must be located inside the --dataDir \"${HOST_DATA_PATH}\"."
                exit 1
            fi
            RELATIVE_PATH="${HOST_FILE_PATH#${HOST_DATA_PATH}}"
            CONTAINER_FILE_PATH="${CONTAINER_DATA_PATH}${RELATIVE_PATH}"
            
            args_for_container+=("$1" "${CONTAINER_FILE_PATH}")
            shift 2
            ;;
        # These are handled separately and already added
        --dataDir|--outputDir)
            args_for_container+=("$1" "/${1#--}") # adds --dataDir /data or --outputDir /output
            shift 2
            ;;
        *)
            # Pass all other arguments directly
            args_for_container+=("$1")
            shift
            ;;
    esac
done

echo "Host Data Path Detected: ${HOST_DATA_PATH}"
echo "Host Output Path Detected: ${HOST_OUTPUT_PATH}"

# Dynamically create the .env file
echo "Creating dynamic .env file..."
cat <<EOF > .env
# This file is auto-generated by run_smedanno.sh
DATA_PATH=${HOST_DATA_PATH}
OUTPUT_PATH=${HOST_OUTPUT_PATH}
EOF

# Build the volume arguments for docker-compose
VOLUME_ARGS=""
for host_path in "${!HOST_TO_CONTAINER_MOUNTS[@]}"; do
    VOLUME_ARGS+=" -v ${host_path}:${HOST_TO_CONTAINER_MOUNTS[$host_path]}"
done

# Execute Docker Compose
echo "Executing pipeline via docker-compose..."
# The -v flags on the command line will be added to the volumes in docker-compose.yml
docker-compose run --rm ${VOLUME_ARGS} smedanno "${args_for_container[@]}"

echo "Wrapper script finished."
